// Theorems in nat.ac that we should be able to prove very quickly.
// These are the polymorphic versions, so somewhat harder than the monomorphized versions.

type Nat: axiom
let 0: Nat = axiom

let Suc: Nat -> Nat = axiom
let 1: Nat = Suc(0)

axiom suc_injective(x: Nat, y: Nat): Suc(x) = Suc(y) -> x = y

axiom suc_neq_zero(x: Nat): Suc(x) != 0

axiom induction(f: Nat -> bool): f(0) & forall(k: Nat) { f(k) -> f(Suc(k)) } -> forall(n: Nat) { f(n) }

define recursion<T>(f: T -> T, a: T, n: Nat) -> T = axiom
axiom recursion_base<T>(f: T -> T, a: T): recursion(f, a, 0) = a
axiom recursion_step<T>(f: T -> T, a: T, n: Nat): recursion(f, a, Suc(n)) = f(recursion(f, a, n))

define add(a: Nat, b: Nat) -> Nat = recursion(Suc, a, b)

// Now let's have some theorems.

theorem add_zero_right(a: Nat): add(a, 0) = a