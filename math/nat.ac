// The axioms of Peano arithmetic.
// Contains enough detail that we can prove these with "check".

type Nat: axiom

let 0: Nat = axiom

let suc: Nat -> Nat = axiom
let 1: Nat = suc(0)

axiom suc_injective(x: Nat, y: Nat): suc(x) = suc(y) -> x = y

axiom suc_neq_zero(x: Nat): suc(x) != 0

axiom induction(f: Nat -> Bool):
    f(0) & forall(k: Nat) { f(k) -> f(suc(k)) } -> forall(n: Nat) { f(n) }

define recursion<T>(f: T -> T, a: T, n: Nat) -> T: axiom
axiom recursion_base<T>(f: T -> T, a: T): recursion(f, a, 0) = a
axiom recursion_step<T>(f: T -> T, a: T, n: Nat): recursion(f, a, suc(n)) = f(recursion(f, a, n))

define add(a: Nat, b: Nat) -> Nat: recursion(suc, a, b)

// Now let's have some theorems.

theorem add_zero_right(a: Nat): add(a, 0) = a

let 2: Nat = suc(1)

theorem one_plus_one: add(1, 1) = 2 by {
    suc(recursion(suc, 1, 0)) = 2
    add(1, suc(0)) = 2
}

theorem add_zero_left(a: Nat): add(0, a) = a by {
    induction(add_zero_left)
    add(0, 0) = 0
    add_zero_left(0)
    forall(x: Nat) {
        if add_zero_left(x) {
            add(0, x) = x
            add(0, suc(x)) = suc(x)
            add_zero_left(suc(x))
        }
    }
}

theorem add_suc_right(a: Nat, b: Nat): add(a, suc(b)) = suc(add(a, b))

theorem add_suc_left(a: Nat, b: Nat): add(suc(a), b) = suc(add(a, b)) by {
    define f(x: Nat) -> Bool: add_suc_left(a, x)
    induction(f)
    add_suc_left(a, 0)
    f(0)
    forall(x: Nat) {
        if f(x) {
            add_suc_left(a, suc(x))
            f(suc(x))
        }
    }
}

theorem add_one_right(a: Nat): add(a, 1) = suc(a)

theorem add_one_left(a: Nat): add(1, a) = suc(a)

theorem suc_ne(a: Nat): suc(a) != a by {
    induction(suc_ne)
    suc_ne(0)
    forall(x: Nat) {
        if suc_ne(x) {
            suc(x) != x
            suc(suc(x)) != suc(x)
            suc_ne(suc(x))
        }
    }
}

theorem suc_suc_ne(a: Nat): suc(suc(a)) != a by {
    induction(suc_suc_ne)
    suc_suc_ne(0)
    forall(x: Nat) {
        if suc_suc_ne(x) {
            suc_suc_ne(suc(x))
        }
    }
}

theorem add_comm(a: Nat, b: Nat): add(a, b) = add(b, a) by {
    define f(x: Nat) -> Bool: add_comm(x, b)
    induction(f)
    add_comm(0, b)
    f(0)
    forall(x: Nat) {
        if f(x) {
            add(b, suc(x)) = suc(add(x, b))
            f(suc(x))
        }
    }
}

theorem add_assoc(a: Nat, b: Nat, c: Nat): add(add(a, b), c) = add(a, add(b, c)) by {
    define f(x: Nat) -> Bool: add_assoc(x, b, c) 
    induction(f)
    forall(x: Nat) {
        if f(x) {
            add(add(suc(x), b), c) = suc(add(add(x, b), c))
            add(add(suc(x), b), c) = add(suc(x), add(b, c))
            f(suc(x))
        }
    }
    f(0)
}

define adder(a: Nat) -> (Nat -> Nat): function(b: Nat) { add(a, b) }

define mul(a: Nat, b: Nat) -> Nat: recursion(adder(a), 0, b)

theorem mul_zero_right(a: Nat): mul(a, 0) = 0

theorem mul_zero_left(a: Nat): mul(0, a) = 0 by {
    induction(mul_zero_left)
    mul_zero_left(0)
    forall(x: Nat) {
        if mul_zero_left(x) {
            adder(0, mul(0, x)) = 0
            mul_zero_left(suc(x))
        }
    }
}

theorem mul_suc_right(a: Nat, b: Nat): mul(a, suc(b)) = add(a, mul(a, b))

theorem mul_suc_left(a: Nat, b: Nat): mul(suc(a), b) = add(b, mul(a, b)) by {
    define f(x: Nat) -> Bool: mul_suc_left(a, x)
    induction(f)
    add(0, mul(a, 0)) = 0
    f(0)
    forall(x: Nat) {
        if f(x) {
            mul(suc(a), x) = add(x, mul(a, x))
            mul(suc(a), suc(x)) = add(suc(a), mul(suc(a), x))
            mul(suc(a), suc(x)) = add(suc(a), add(x, mul(a, x)))
            mul(a, suc(x)) = add(a, mul(a, x))
            add(suc(a), add(x, mul(a, x))) = add(add(suc(a), x), mul(a, x))
            add(suc(a), add(x, mul(a, x))) = add(suc(add(a, x)), mul(a, x))
            add(suc(a), add(x, mul(a, x))) = add(suc(add(x, a)), mul(a, x))
            add(suc(a), add(x, mul(a, x))) = add(add(suc(x), a), mul(a, x))
            add_assoc(suc(x), a, mul(a, x))
            add(add(suc(x), a), mul(a, x)) = add(suc(x), add(a, mul(a, x)))
            add(suc(a), add(x, mul(a, x))) = add(suc(x), add(a, mul(a, x)))
            mul(suc(a), suc(x)) = add(suc(x), add(a, mul(a, x)))
            mul(suc(a), suc(x)) = add(suc(x), mul(a, suc(x)))
            f(suc(x))
        }
    }
    f(b)
}

theorem mul_one_one: mul(1, 1) = 1 by {
    mul(1, 1) = mul(1, suc(0))
    mul(1, 1) = add(1, mul(1, 0))
    mul(1, 1) = add(1, 0)
    mul(1, 1) = 1
}

theorem mul_comm(a: Nat, b: Nat): mul(a, b) = mul(b, a) by {
    define f(x: Nat) -> Bool: mul_comm(x, b)
    induction(f)
    f(0)
    forall(x: Nat) {
        if f(x) {
            mul(x, b) = mul(b, x)
            mul(suc(x), b) = add(b, mul(x, b))
            mul(b, suc(x)) = add(b, mul(x, b))
            mul(suc(x), b) = mul(b, suc(x))
            f(suc(x))
        }
    }
    f(a)
}

theorem add_comm_4(a: Nat, b: Nat, c: Nat, d: Nat):
    add(add(a, b), add(c, d)) = add(add(a, c), add(b, d)) by {
    add(a, add(b, c)) = add(add(a, c), b)
}

theorem distrib_left(a: Nat, b: Nat, c: Nat):
    mul(a, add(b, c)) = add(mul(a, b), mul(a, c)) by {
    define f(x: Nat) -> Bool: distrib_left(x, b, c)
    induction(f)
    add(mul(0, b), 0) = 0
    distrib_left(0, b, c)
    f(0)
    forall(x: Nat) {
        if f(x) {
            mul(x, add(b, c)) = add(mul(x, b), mul(x, c))
            mul(suc(x), add(b, c)) = add(add(b, c), mul(x, add(b, c)))
            mul(suc(x), add(b, c)) = add(add(b, c), add(mul(x, b), mul(x, c)))
            mul(suc(x), add(b, c)) = add(add(b, c), add(mul(x, b), mul(x, c)))
            mul(suc(x), add(b, c)) = add(add(b, mul(x, b)), add(c, mul(x, c)))
            add(b, mul(x, b)) = mul(suc(x), b)
            add(c, mul(x, c)) = mul(suc(x), c)
            add(add(b, mul(x, b)), add(c, mul(x, c))) = add(mul(suc(x), b), add(c, mul(x, c)))
            add(add(b, mul(x, b)), add(c, mul(x, c))) = add(mul(suc(x), b), mul(suc(x), c))
            mul(suc(x), add(b, c)) = add(mul(suc(x), b), mul(suc(x), c))
            distrib_left(suc(x), b, c)
            f(suc(x))
        }
    }
}

theorem distrib_right(a: Nat, b: Nat, c: Nat):
    mul(add(a, b), c) = add(mul(a, c), mul(b, c)) by {
    add(mul(c, a), mul(b, c)) = mul(c, add(a, b))
}

theorem mul_assoc(a: Nat, b: Nat, c: Nat): mul(mul(a, b), c) = mul(a, mul(b, c)) by {
    define f(x: Nat) -> Bool: mul_assoc(x, b, c)
    induction(f)
    f(0)
    forall(x: Nat) {
        if f(x) {
            mul(mul(x, b), c) = mul(x, mul(b, c))
            mul(mul(suc(x), b), c) = mul(add(b, mul(x, b)), c)
            mul(add(b, mul(x, b)), c) = add(mul(b, c), mul(mul(x, b), c))
            mul(mul(suc(x), b), c) = add(mul(b, c), mul(mul(x, b), c))
            mul(mul(suc(x), b), c) = add(mul(b, c), mul(x, mul(b, c)))
            mul(mul(suc(x), b), c) = mul(suc(x), mul(b, c))
            f(suc(x))
        }
    }
}

theorem mul_one_right(a: Nat): mul(a, 1) = a by {
    add(a, mul(a, 0)) = a
}

theorem mul_one_left(a: Nat): mul(1, a) = a

// Comparisons


define lte(a: Nat, b: Nat) -> Bool: exists(c: Nat) { add(a, c) = b }

define lt(a: Nat, b: Nat) -> Bool: lte(a, b) & a != b

theorem lt_not_ref(a: Nat): !lt(a, a)

theorem lte_ref(a: Nat): lte(a, a)

theorem add_to_zero(a: Nat, b: Nat): add(a, b) = 0 -> a = 0 & b = 0 by {
    define f(x: Nat) -> Bool: add_to_zero(x, b)
    induction(f)
    f(0)
    forall(x: Nat) {
        add_to_zero(suc(x), b)
        f(suc(x))
    }
}

theorem only_zero_lte_zero(a: Nat): lte(a, 0) -> a = 0

theorem not_lt_zero(a: Nat): !lt(a, 0)

theorem zero_or_suc(a: Nat): a = 0 | exists(b: Nat) { a = suc(b) } by {
    define f(x: Nat) -> Bool: a = 0 | exists(b: Nat) { a = suc(b) }
    induction(f)
}

theorem lte_cancel_suc(a: Nat, b: Nat): lte(suc(a), suc(b)) -> lte(a, b) by {
    exists(c: Nat) { add(suc(a), c) = suc(b) }
    add(suc(a), c) = suc(b)
    suc(add(a, c)) = suc(b)
    add(a, c) = b
    lte(a, b)
}

theorem lt_cancel_suc(a: Nat, b: Nat): lt(suc(a), suc(b)) -> lt(a, b)

theorem lt_not_symm(a: Nat, b: Nat): lt(a, b) -> !lt(b, a) by {
    define f(x: Nat) -> Bool: forall(y: Nat) { lt_not_symm(x, y) }
    induction(f)
    f(0)
    forall(x: Nat) {
        if f(x) {
            forall(y: Nat) {
                if lt(suc(x), y) {
                    y != 0
                    zero_or_suc(y)
                    y = 0 | exists(z: Nat) { y = suc(z) }
                    exists(z: Nat) { y = suc(z) }
                    lt(suc(x), suc(z))
                    lt(x, z)
                    !lt(z, x)
                    !lt(suc(z), suc(x))
                    !lt(y, suc(x))
                }
            }
            f(suc(x))
        }
    }
}

theorem lt_diff(a: Nat, b: Nat): lt(a, b) -> exists(c: Nat) { add(a, c) = b & c != 0 } by {
    exists(c: Nat) { add(a, c) = b }
    b != a
    c != 0
}

theorem lte_trans(a: Nat, b: Nat, c: Nat): lte(a, b) & lte(b, c) -> lte(a, c) by {
    define f(z: Nat) -> Bool: forall(x: Nat, y: Nat) { lte_trans(x, y, z) }
    induction(f)
    forall(x: Nat, y: Nat) {
        lte_trans(x, y, 0)
    }
    f(0)
    forall(z: Nat) {
        if f(z) {
            forall(x: Nat, y: Nat) {
                if lte(x, y) & lte(y, suc(z)) {
                    exists(d: Nat) { add(x, d) = y }
                    exists(e: Nat) { add(y, e) = suc(z) }
                    add(x, add(d, e)) = suc(z)
                    lte(x, suc(z))
                }
                lte_trans(x, y, suc(z))
            }
            f(suc(z))
        }
    }
}

theorem lt_and_lte(a: Nat, b: Nat, c: Nat): lt(a, b) & lte(b, c) -> lt(a, c) by {
    lte(a, b)
    lte(a, c)
    if a = c {
        lt(c, b)
        false
    }
    lt(a, c)
}

theorem lte_and_lt(a: Nat, b: Nat, c: Nat): lte(a, b) & lt(b, c) -> lt(a, c) by {
    lte(b, c)
    lte(a, c)
    if a = c {
        lt(b, a)
        false
    }
    lt(a, c)
}

theorem lt_trans(a: Nat, b: Nat, c: Nat): lt(a, b) & lt(b, c) -> lt(a, c) by {
    lte(a, b)
}

theorem add_cancels_left(a: Nat, b: Nat, c: Nat): add(a, b) = add(a, c) -> b = c by {
    define f(x: Nat) -> Bool: add_cancels_left(x, b, c)
    induction(f)
    f(0)
    forall(x: Nat) {
        if f(x) {
            if add(suc(x), b) = add(suc(x), c) {
                suc(add(x, c)) = add(suc(x), b)
                suc(add(x, b)) = suc(add(x, c))
                add(x, b) = add(x, c)
                b = c
            }
            add(suc(x), b) = add(suc(x), c) -> b = c
            f(suc(x))
        }
    }
    f(a)
}

theorem add_cancels_right(a: Nat, b: Nat, c: Nat): add(b, a) = add(c, a) -> b = c by {
    add(a, b) = add(a, c)
    b = c
}

theorem add_identity_right(a: Nat, b: Nat): add(a, b) = a -> b = 0

theorem lt_add_suc(a: Nat, b: Nat): lt(a, add(a, suc(b))) by {
    lte(a, add(a, suc(b)))
    if a = add(a, suc(b)) {
        add(a, 0) = add(a, suc(b))
        0 = suc(b)
        false
    }
}

theorem lt_suc(a: Nat): lt(a, suc(a)) by {
    suc(a) = add(a, 1)
    suc(a) = add(a, suc(0))
}

theorem lt_suc_left(a: Nat, b: Nat): lt(a, b) -> suc(a) = b | lt(suc(a), b) by {
    exists(c: Nat) { add(a, c) = b & c != 0 }
    exists(d: Nat) { suc(d) = c }
    if d = 0 {
        add(a, 1) = b
        suc(a) = b
    } else {
        suc(add(a, d)) = b
        add(suc(a), d) = b
        suc(a) != b
        lt(suc(a), b)
    }
}

theorem lt_suc_right(a: Nat, b: Nat): lt(a, suc(b)) -> a = b | lt(a, b) by {
    if a != b {
        suc(b) != suc(a)
        lt(suc(a), suc(b))
        lt(a, b)
    }
}

theorem lt_add_left(a: Nat, b: Nat, c: Nat): lt(b, c) -> lt(add(a, b), add(a, c)) by {
    exists(d: Nat) { add(b, d) = c }
    c != b
    d != 0
    add(add(a, b), d) = add(a, c)
    lt(add(a, b), add(add(a, b), d))
    lt(add(a, b), add(a, c))
}

theorem trichotomy(a: Nat, b: Nat): lt(a, b) | lt(b, a) | a = b by {
    define f(x: Nat) -> Bool: trichotomy(a, x)
    induction(f)
    trichotomy(a, 0)
    f(0)
    forall(x: Nat) {
        if f(x) {
            lt(a, x) | lt(x, a) | a = x
            if lt(a, x) {
                lte(x, suc(x))
                lt(a, suc(x))
            }
            if lt(x, a) {
                suc(x) = a | lt(suc(x), a)
            }
            if a = x {
                lt(a, suc(x))
            }
            f(suc(x))
        }
    }
}

theorem lt_or_lte(a: Nat, b: Nat): lt(a, b) | lte(b, a) by {
    if !lt(a, b) & !lte(b, a) {
        b = a
        false
    }
}

theorem lt_imp_lte_suc(a: Nat, b: Nat): lt(a, b) -> lte(suc(a), b) by {
    if !lte(suc(a), b) {
        suc(a) = b
        false
    }
}

theorem lte_imp_not_lt(a: Nat, b: Nat): lte(a, b) -> !lt(b, a) by {
    if a = b {
        !lt(b, a)
    } else {
        lt(a, b)
        !lt(b, a)
    }
}

theorem division_theorem(m: Nat, n: Nat): lt(0, n) -> exists(q: Nat, r: Nat) {
    lt(r, n) & m = add(mul(q, n), r)
} by {
    define f(x: Nat) -> Bool: division_theorem(x, n)
    induction(f)
    exists(k0: Nat) { mul(k0, n) = 0 }
    f(0)
    forall(x: Nat) {
        if f(x) {
            division_theorem(x, n)
            exists(q: Nat, r: Nat) {
                lt(r, n) & x = add(mul(q, n), r)
            }
            if suc(r) = n {
                suc(x) = suc(add(mul(q, n), r))
                suc(x) = add(mul(q, n), suc(r))
                suc(x) = add(mul(q, n), n)
                add(n, mul(q, n)) = suc(x)
                suc(x) = mul(suc(q), n)
                suc(x) = add(mul(suc(q), n), 0)
                f(suc(x))
            } else {
                lt(suc(r), n)
                suc(x) = add(mul(q, n), suc(r))
                f(suc(x))
            }
            f(suc(x))
        }
    }
    division_theorem(m, n)
}

define is_composite(a: Nat) -> Bool: exists(b: Nat, c: Nat) {
    lt(1, b) & lt(1, c) & a = mul(b, c)
}

theorem mul_to_zero(a: Nat, b: Nat): mul(a, b) = 0 -> a = 0 | b = 0 by {
    if a != 0 & b != 0 {
        exists(pred_a: Nat) { suc(pred_a) = a }
        mul(suc(pred_a), b) = 0
        add(b, mul(pred_a, b)) = 0
        false
    }
}

theorem divisor_lt(a: Nat, b: Nat, c: Nat):
    a != 0 & lt(1, b) & mul(a, b) = c -> lt(a, c) by {
    exists(d: Nat) { add(1, d) = b & d != 0 }
    mul(a, add(1, d)) = c
    add(1, d) = suc(d)
    mul(a, suc(d)) = c
    add(a, mul(a, d)) = c
    mul(a, d) != 0
    a != c
}

define is_prime(a: Nat) -> Bool: lt(1, a) & !is_composite(a)

define divides(a: Nat, b: Nat) -> Bool: exists(c: Nat) { mul(a, c) = b }

theorem divides_self(a: Nat): divides(a, a)

define true_below(f: Nat -> Bool, n: Nat) -> Bool: forall(x: Nat) { lt(x, n) -> f(x) }

theorem strong_induction(f: Nat -> Bool): forall(k: Nat) {
    true_below(f, k) -> f(k)
} -> forall(n: Nat) { f(n) } by {
    define g(x: Nat) -> Bool: true_below(f, x)
    induction(g)
    g(0)
    forall(x: Nat) {
        if g(x) {
            true_below(f, x)
            f(x)
            forall(y: Nat) {
                if lt(y, suc(x)) {
                    if lt(y, x) {
                        f(y)
                    }
                    if !lt(y, x) {
                        y = x
                        f(y)
                    }
                    f(y)
                }
            }
            true_below(f, suc(x))
            g(suc(x))
        }
    }
    forall(x: Nat) {
        g(x)
    }
    forall(n: Nat) {
        g(suc(n))
        true_below(f, suc(n))
        f(n)
    }
}

theorem divides_trans(a: Nat, b: Nat, c: Nat):
    divides(a, b) & divides(b, c) -> divides(a, c) by {
    exists(d: Nat) { mul(a, d) = b }
    exists(e: Nat) { mul(b, e) = c }
    mul(a, mul(d, e)) = c
}

theorem has_prime_divisor(n: Nat): lt(1, n) -> exists(p: Nat) {
    is_prime(p) & divides(p, n)
} by {
    strong_induction(has_prime_divisor)
    forall(k: Nat) {
        if true_below(has_prime_divisor, k) {
            if is_prime(k) {
                divides(k, k)
                has_prime_divisor(k)
            }
            if is_composite(k) {
                exists(b: Nat, c: Nat) {
                    lt(1, b) & lt(1, c) & k = mul(b, c)
                }
                b != 0
                lt(1, c)
                mul(b, c) = k
                lt(b, k)
                has_prime_divisor(b)
                exists(p: Nat) {
                    is_prime(p) & divides(p, b)
                }
                divides(p, k)
                has_prime_divisor(k)
            }
            has_prime_divisor(k)
        }
    }
}

struct NatPair {
    first: Nat
    second: Nat
}

// Takes (n, n!) -> (n+1, (n+1)!)
define fac_helper(p: NatPair) -> NatPair: NatPair.new(suc(NatPair.first(p)), mul(suc(NatPair.first(p)), NatPair.second(p)))

// Seems like a shame this isn't proven automatically.
// Every step in the proof is a pretty simple rewrite.
// Really, all the statements about factorials seem like they should be provable automatically.
theorem fac_helper_alt(a: Nat, b: Nat): fac_helper(NatPair.new(a, b)) = NatPair.new(suc(a), mul(suc(a), b)) by {
    let p: NatPair = NatPair.new(a, b)
    NatPair.first(p) = a
    NatPair.second(p) = b
    fac_helper(p) = NatPair.new(suc(NatPair.first(p)), mul(suc(NatPair.first(p)), NatPair.second(p)))
    fac_helper(p) = NatPair.new(suc(NatPair.first(p)), mul(suc(a), b))
}

// Takes n -> (n, n!)
define fac_pair(n: Nat) -> NatPair: recursion(fac_helper, NatPair.new(0, 1), n)

theorem fac_pair_first(n: Nat): NatPair.first(fac_pair(n)) = n by {
    induction(fac_pair_first)
    fac_pair_first(0)
    forall(x: Nat) {
        if fac_pair_first(x) {
            x = NatPair.first(fac_pair(x))
            let a: Nat = NatPair.second(fac_pair(x))
            NatPair.new(NatPair.first(fac_pair(x)), a) = fac_pair(x)
            fac_pair(x) = NatPair.new(x, a)
            fac_pair(suc(x)) = fac_helper(fac_pair(x))
            fac_pair(suc(x)) = NatPair.new(suc(x), mul(suc(x), a))
            let b: Nat = mul(suc(x), a)
            fac_pair(suc(x)) = NatPair.new(suc(x), b)
            NatPair.first(NatPair.new(suc(x), b)) = suc(x)
            NatPair.first(fac_pair(suc(x))) = suc(x)
            fac_pair_first(suc(x))
        }
    }
}

define factorial(n: Nat) -> Nat: NatPair.second(fac_pair(n))

theorem factorial_zero: factorial(0) = 1

theorem factorial_one: factorial(1) = 1 by {
    fac_pair(0) = NatPair.new(0, 1)
    fac_pair(1) = fac_helper(fac_pair(0))
    fac_pair(1) = NatPair.new(1, mul(1, 1))
    fac_pair(1) = NatPair.new(1, 1)
}

theorem factorial_step(n: Nat): factorial(suc(n)) = mul(suc(n), factorial(n)) by {
    fac_pair(n) = NatPair.new(n, factorial(n))
    fac_pair(suc(n)) = fac_helper(fac_pair(n))

    fac_pair(suc(n)) = NatPair.new(suc(n), mul(suc(n), factorial(n)))
    NatPair.second(fac_pair(suc(n))) = mul(suc(n), factorial(n))
}

theorem divides_factorial(k: Nat, n: Nat):
    k != 0 & lte(k, n) -> divides(k, factorial(n)) by {
    define f(x: Nat) -> Bool: divides_factorial(k, x)
    induction(f)
    f(0)
    forall(x: Nat) {
        if f(x) {
            lte(k, x) -> divides(k, factorial(x))
            if lte(k, suc(x)) {
                if k = suc(x) {
                    divides(suc(x), factorial(suc(x)))
                    divides(k, factorial(suc(x)))
                }
                if k != suc(x) {
                    lte(suc(k), suc(x))
                    lte(k, x)
                    divides(k, factorial(x))
                    divides(factorial(x), mul(suc(x), factorial(x)))
                    divides(factorial(x), factorial(suc(x)))
                    divides(k, factorial(suc(x)))
                }
                divides_factorial(k, suc(x))
            }
            f(suc(x))
        }
    }
}

theorem factorial_nondecreasing(n: Nat): lte(factorial(n), factorial(suc(n))) by {
    lte(factorial(n), mul(suc(n), factorial(n)))
}

theorem lte_one_factorial(a: Nat): lte(1, factorial(a)) by {
    induction(lte_one_factorial)
    lte_one_factorial(0)
    forall(x: Nat) {
        if lte_one_factorial(x) {
            lte(1, factorial(x))
            lte(factorial(x), factorial(suc(x)))
            lte(1, factorial(suc(x)))
            lte_one_factorial(suc(x))
        }
    }
}

theorem lt_imp_lt_suc(a: Nat, b: Nat): lt(a, b) -> lt(a, suc(b)) by {
    exists(c: Nat) { add(a, c) = b & c != 0 }
    add(a, suc(c)) = suc(b)
    suc(c) != 0
}

theorem lte_mul_both(a: Nat, b: Nat, c: Nat): lte(b, c) -> lte(mul(a, b), mul(a, c)) by {
    exists(d: Nat) { add(b, d) = c }
    mul(a, add(b, d)) = mul(a, c)
    add(mul(a, b), mul(a, d)) = mul(a, c)
    lte(mul(a, b), mul(a, c))
}

theorem lt_mul_both(a: Nat, b: Nat, c: Nat): a != 0 & lt(b, c) -> lt(mul(a, b), mul(a, c)) by {
    exists(d: Nat) { add(b, d) = c }
    c != b
    d != 0
    mul(a, add(b, d)) = mul(a, c)
    add(mul(a, b), mul(a, d)) = mul(a, c)
    mul(a, d) != 0
    if mul(a, b) = mul(a, c) {
        add(mul(a, b), mul(a, d)) = mul(a, b)
        let y: Nat = mul(a, b)
        let z: Nat = mul(a, d)
        add(y, z) = y
        false
    }
    lte(mul(a, b), mul(a, c))
    lt(mul(a, b), mul(a, c))
}

theorem lt_cancel_mul(a: Nat, b: Nat, c: Nat): a != 0 & lt(mul(a, b), mul(a, c)) -> lt(b, c) by {
    if lte(c, b) {
        lte(mul(a, c), mul(a, b))
        false
    }
    c != b
}

theorem mul_to_one(a: Nat, b: Nat): mul(a, b) = 1 -> a = 1 by {
    1 != 0
    a != 0
    !lt(a, 1)
    b != 0
    if lt(1, a) {
        lt(mul(b, 1), mul(b, a))
        lt(mul(b, 1), mul(a, b))
        lt(mul(b, 1), 1)
        mul(b, 1) = 0
        b = 0
        false
    }
}

theorem divides_suc(a: Nat, b: Nat): divides(a, b) & divides(a, suc(b)) -> a = 1 by {
    exists(k0: Nat) { mul(a, k0) = suc(b) }
    a != 0
    exists(c: Nat) { mul(a, c) = b }
    exists(d: Nat) { mul(a, d) = suc(b) }
    lt(mul(a, c), mul(a, d))
    lte(c, d)
    exists(e: Nat) { add(c, e) = d }
    mul(a, add(c, e)) = suc(b)
    add(mul(a, c), mul(a, e)) = suc(b)
    add(b, mul(a, e)) = suc(b)
    add(b, mul(a, e)) = add(b, 1)
    mul(a, e) = 1
}

theorem exists_infinite_primes(n: Nat): exists(p: Nat) {
    lt(n, p) & is_prime(p)
} by {
    let m: Nat = suc(factorial(n))
    if !lt(1, suc(factorial(n))) {
        !lt(1, factorial(n))
        factorial(n) = 1
        false
    }
    lt(1, m)
    exists(p: Nat) {
        is_prime(p) & divides(p, m)
    }
    p != 1
    if lte(p, n) {
        divides_factorial(p, n)
        divides(p, factorial(n))
        false
    }
    !lte(p, n)
    lt(n, p)
}

theorem divides_zero(a: Nat): divides(a, 0)

theorem zero_divides(a: Nat): divides(0, a) -> a = 0

theorem divides_mul(a: Nat, b: Nat, d: Nat): divides(d, a) -> divides(d, mul(a, b)) by {
    exists(q: Nat) { mul(q, d) = a }
    mul(mul(q, d), b) = mul(a, b)
    mul(mul(d, q), b) = mul(a, b)
    mul(d, mul(q, b)) = mul(a, b)
}

theorem lte_mul(a: Nat, b: Nat): b != 0 -> lte(a, mul(a, b)) by {
    !lt(b, 1)
    lte(1, b)
    lte(mul(a, 1), mul(a, b))
}

theorem divides_lte(a: Nat, b: Nat): divides(a, b) -> b = 0 | lte(a, b) by {
    if b != 0 {
        exists(q: Nat) { mul(q, a) = b }
        if q = 0 {
            b = 0
            false
        }
        lte(a, mul(a, q))
        lte(a, mul(q, a))
        lte(a, b)
    }
}

theorem divides_add(a: Nat, b: Nat, d: Nat):
    divides(d, a) & divides(d, b) -> divides(d, add(a, b)) by {
    exists(qa: Nat) { mul(qa, d) = a }
    exists(qb: Nat) { mul(qb, d) = b }
    mul(add(qa, qb), d) = add(mul(qa, d), b)
    mul(add(qa, qb), d) = add(a, b)
    divides(d, mul(add(qa, qb), d))
}


theorem divides_symm(a: Nat, b: Nat): divides(a, b) & divides(b, a) -> a = b by {
    if a = 0 {
        divides(0, b)
        b = 0
        a = b
    } else {
        b != 0
        lte(a, b)
        lte(b, a)
        if a != b {
            lt(a, b)
            lt(b, a)
            false
        }
        a = b
    }
}

theorem cross_sum_lte(a: Nat, b: Nat, c: Nat, d: Nat): add(a, b) = add(c, d) & lte(a, c) -> lte(d, b) by {
    exists(e: Nat) { add(a, e) = c }
    add(a, b) = add(add(a, e), d)
    add(a, b) = add(a, add(e, d))
    b = add(e, d)
    lte(d, b)
}