// The axioms of Peano arithmetic.
// Contains enough detail that we can prove these with "check".

type Nat: axiom

let 0: Nat = axiom

let Suc: Nat -> Nat = axiom
let 1: Nat = Suc(0)

axiom suc_injective(x: Nat, y: Nat): Suc(x) = Suc(y) -> x = y

axiom suc_neq_zero(x: Nat): Suc(x) != 0

axiom induction(f: Nat -> bool):
    f(0) & forall(k: Nat) { f(k) -> f(Suc(k)) } -> forall(n: Nat) { f(n) }

define recursion<T>(f: T -> T, a: T, n: Nat) -> T = axiom
axiom recursion_base<T>(f: T -> T, a: T): recursion(f, a, 0) = a
axiom recursion_step<T>(f: T -> T, a: T, n: Nat): recursion(f, a, Suc(n)) = f(recursion(f, a, n))

define add(a: Nat, b: Nat) -> Nat = recursion(Suc, a, b)

// Now let's have some theorems.

theorem add_zero_right(a: Nat): add(a, 0) = a

let 2: Nat = Suc(1)

theorem one_plus_one: add(1, 1) = 2

theorem add_zero_left(a: Nat): add(0, a) = a

theorem add_suc_right(a: Nat, b: Nat): add(a, Suc(b)) = Suc(add(a, b))

theorem add_suc_left(a: Nat, b: Nat): add(Suc(a), b) = Suc(add(a, b))

theorem suc_ne(a: Nat): Suc(a) != a by {
    induction(suc_ne)
}

theorem suc_suc_ne(a: Nat): Suc(Suc(a)) != a

theorem add_comm(a: Nat, b: Nat): add(a, b) = add(b, a)

theorem add_assoc(a: Nat, b: Nat, c: Nat): add(add(a, b), c) = add(a, add(b, c)) by {
    define f(x: Nat) -> bool = add_assoc(x, b, c) 
    induction(f)
    forall(x: Nat) {
        if f(x) {
            add(add(Suc(x), b), c) = add(Suc(add(x, b)), c)
            add(add(Suc(x), b), c) = Suc(add(add(x, b), c))
            Suc(add(add(x, b), c)) = Suc(add(x, add(b, c)))
            add(add(Suc(x), b), c) = Suc(add(x, add(b, c)))
            add(add(Suc(x), b), c) = add(Suc(x), add(b, c))
            f(Suc(x))
        }
    }
    f(0)
    f(a)
}

define adder(a: Nat) -> (Nat -> Nat) = function(b: Nat) { add(a, b) }

define mul(a: Nat, b: Nat) -> Nat = recursion(adder(a), 0, b)

theorem mul_zero_right(a: Nat): mul(a, 0) = 0

theorem mul_zero_left(a: Nat): mul(0, a) = 0

theorem mul_suc_right(a: Nat, b: Nat): mul(a, Suc(b)) = add(a, mul(a, b))

theorem mul_suc_left(a: Nat, b: Nat): mul(Suc(a), b) = add(b, mul(a, b)) by {
    define f(x: Nat) -> bool = mul_suc_left(a, x)
    induction(f)
    f(0)
    forall(x: Nat) {
        if f(x) {
            mul(Suc(a), x) = add(x, mul(a, x))
            mul(Suc(a), Suc(x)) = add(Suc(a), mul(Suc(a), x))
            mul(Suc(a), Suc(x)) = add(Suc(a), add(x, mul(a, x)))
            mul(a, Suc(x)) = add(a, mul(a, x))
            add(Suc(a), add(x, mul(a, x))) = add(add(Suc(a), x), mul(a, x))
            add(Suc(a), add(x, mul(a, x))) = add(Suc(add(a, x)), mul(a, x))
            add(Suc(a), add(x, mul(a, x))) = add(Suc(add(x, a)), mul(a, x))
            add(Suc(a), add(x, mul(a, x))) = add(add(Suc(x), a), mul(a, x))
            add_assoc(Suc(x), a, mul(a, x))
            add(add(Suc(x), a), mul(a, x)) = add(Suc(x), add(a, mul(a, x)))
            add(Suc(a), add(x, mul(a, x))) = add(Suc(x), add(a, mul(a, x)))
            mul(Suc(a), Suc(x)) = add(Suc(x), add(a, mul(a, x)))
            mul(Suc(a), Suc(x)) = add(Suc(x), mul(a, Suc(x)))
            f(Suc(x))
        }
    }
    f(b)
}

theorem mul_comm(a: Nat, b: Nat): mul(a, b) = mul(b, a) by {
    define f(x: Nat) -> bool = mul_comm(x, b)
    induction(f)
    f(0)
    forall(x: Nat) {
        if f(x) {
            mul(x, b) = mul(b, x)
            mul(Suc(x), b) = add(b, mul(x, b))
            mul(b, Suc(x)) = add(b, mul(x, b))
            mul(Suc(x), b) = mul(b, Suc(x))
            f(Suc(x))
        }
    }
    f(a)
}

theorem add_comm_4(a: Nat, b: Nat, c: Nat, d: Nat):
    add(add(a, b), add(c, d)) = add(add(a, c), add(b, d))

theorem left_distrib(a: Nat, b: Nat, c: Nat): mul(a, add(b, c)) = add(mul(a, b), mul(a, c)) by {
    define f(x: Nat) -> bool = left_distrib(x, b, c)
    induction(f)
    f(0)
    forall(x: Nat) {
        if f(x) {
            mul(x, add(b, c)) = add(mul(x, b), mul(x, c))
            mul(Suc(x), add(b, c)) = add(add(b, c), mul(x, add(b, c)))
            mul(Suc(x), add(b, c)) = add(add(b, c), add(mul(x, b), mul(x, c)))
            mul(Suc(x), add(b, c)) = add(add(b, c), add(mul(x, b), mul(x, c)))
            mul(Suc(x), add(b, c)) = add(add(b, mul(x, b)), add(c, mul(x, c)))
            mul(Suc(x), add(b, c)) = add(mul(Suc(x), b), mul(Suc(x), c))
            f(Suc(x))
        }
    }
}

theorem right_distrib(a: Nat, b: Nat, c: Nat): mul(add(a, b), c) = add(mul(a, c), mul(b, c))

theorem mul_assoc(a: Nat, b: Nat, c: Nat): mul(mul(a, b), c) = mul(a, mul(b, c)) by {
    define f(x: Nat) -> bool = mul_assoc(x, b, c)
    induction(f)
    f(0)
    forall(x: Nat) {
        if f(x) {
            mul(mul(x, b), c) = mul(x, mul(b, c))
            mul(mul(Suc(x), b), c) = mul(add(b, mul(x, b)), c)
            mul(add(b, mul(x, b)), c) = add(mul(b, c), mul(mul(x, b), c))
            mul(mul(Suc(x), b), c) = add(mul(b, c), mul(mul(x, b), c))
            mul(mul(Suc(x), b), c) = add(mul(b, c), mul(x, mul(b, c)))
            mul(mul(Suc(x), b), c) = mul(Suc(x), mul(b, c))
            f(Suc(x))
        }
    }
}

define lte(a: Nat, b: Nat) -> bool = exists(c: Nat) { add(a, c) = b }

define lt(a: Nat, b: Nat) -> bool = lte(a, b) & a != b

theorem lt_not_ref(a: Nat): !lt(a, a) by {
    if lt(a, a) {
        false
    }
}

theorem add_to_zero(a: Nat, b: Nat): add(a, b) = 0 -> a = 0 & b = 0

theorem only_zero_lte_zero(a: Nat): lte(a, 0) -> a = 0

theorem not_lt_zero(a: Nat): !lt(a, 0)

theorem zero_or_suc(a: Nat): a = 0 | exists(b: Nat) { a = Suc(b) } by {
    define f(x: Nat) -> bool = (a = 0 | exists(b: Nat) { a = Suc(b) })
    induction(f)
}

theorem lte_cancel_suc(a: Nat, b: Nat): lte(Suc(a), Suc(b)) -> lte(a, b) by {
    if lte(Suc(a), Suc(b)) {
        exists(c: Nat) { add(Suc(a), c) = Suc(b) }
        add(Suc(a), c) = Suc(b)
        Suc(add(a, c)) = Suc(b)
        add(a, c) = b
        lte(a, b)
    }
}

theorem lt_cancel_suc(a: Nat, b: Nat): lt(Suc(a), Suc(b)) -> lt(a, b)

theorem lt_not_symm(a: Nat, b: Nat): lt(a, b) -> !lt(b, a) by {
    define f(x: Nat) -> bool = forall(y: Nat) { lt_not_symm(x, y) }
    induction(f)
    f(0)
    forall(x: Nat) {
        if f(x) {
            forall(y: Nat) {
                if lt(Suc(x), y) {
                    y != 0
                    zero_or_suc(y)
                    y = 0 | exists(z: Nat) { y = Suc(z) }
                    exists(z: Nat) { y = Suc(z) }
                    lt(Suc(x), Suc(z))
                    lt(x, z)
                    !lt(z, x)
                    !lt(Suc(z), Suc(x))
                    !lt(y, Suc(x))
                }
            }
            f(Suc(x))
        }
    }
}

theorem lt_diff(a: Nat, b: Nat): lt(a, b) -> exists(c: Nat) { add(a, c) = b & c != 0 } by {
    if lt(a, b) {
        lte(a, b)
        exists(c: Nat) { add(a, c) = b }
        add(a, c) = b
        c != 0
        lt_diff(a, b)
    }
}

theorem lte_trans(a: Nat, b: Nat, c: Nat): lte(a, b) & lte(b, c) -> lte(a, c) by {
    define f(z: Nat) -> bool = forall(x: Nat, y: Nat) { lte_trans(x, y, z) }
    induction(f)
    f(0)
    forall(z: Nat) {
        if f(z) {
            forall(x: Nat, y: Nat) {
                if lte(x, y) & lte(y, Suc(z)) {
                    lte(x, Suc(z))
                }
                lte_trans(x, y, Suc(z))
            }
            f(Suc(z))
        }
    }
}

theorem lt_add_suc(a: Nat, b: Nat): lt(a, add(a, Suc(b)))

theorem add_cancels_left(a: Nat, b: Nat, c: Nat): add(a, b) = add(a, c) -> b = c by {
    define f(x: Nat) -> bool = add_cancels_left(x, b, c)
    induction(f)
    f(0)
    forall(x: Nat) {
        if f(x) {
            if add(Suc(x), b) = add(Suc(x), c) {
                Suc(add(x, b)) = Suc(add(x, c))
                add(x, b) = add(x, c)
                b = c
            }
            add(Suc(x), b) = add(Suc(x), c) -> b = c
            f(Suc(x))
        }
    }
    f(a)
}

theorem add_cancels_right(a: Nat, b: Nat, c: Nat): add(b, a) = add(c, a) -> b = c by {
    if add(b, a) = add(c, a) {
        add(a, b) = add(a, c)
        b = c
    }
}

theorem add_identity_right(a: Nat, b: Nat): add(a, b) = a -> b = 0

theorem lt_suc_left(a: Nat, b: Nat): lt(a, b) -> Suc(a) = b | lt(Suc(a), b) by {
    if lt(a, b) {
        exists(c: Nat) { add(a, c) = b & c != 0 }
        exists(d: Nat) { Suc(d) = c }
        add(a, Suc(d)) = b
        if d = 0 {
            Suc(a) = b
        }
        if d != 0 {
            add(Suc(a), d) = b
            lt(Suc(a), b)
        }
        lt_suc_left(a, b)
    }
}

theorem lt_suc_right(a: Nat, b: Nat): lt(a, Suc(b)) -> a = b | lt(a, b)

theorem division_theorem(m: Nat, n: Nat): lt(0, n) -> exists(q: Nat, r: Nat) {
    lt(r, n) & m = add(mul(q, n), r)
} by {
    if lt(0, n) {
        define f(x: Nat) -> bool = division_theorem(x, n)
        induction(f)
        f(0)
        forall(x: Nat) {
            if f(x) {
                exists(q: Nat, r: Nat) {
                    lt(r, n) & x = add(mul(q, n), r)
                }
                if Suc(r) = n {
                    Suc(x) = add(mul(Suc(q), n), 0)
                    f(Suc(x))
                }
                if Suc(r) != n {
                    lt(Suc(r), n)
                    Suc(x) = add(mul(q, n), Suc(r))
                    f(Suc(x))
                }
                f(Suc(x))
            }
        }
        division_theorem(m, n)
    }
}

define is_composite(a: Nat) -> bool = exists(b: Nat, c: Nat) {
    lt(1, b) & lt(1, c) & a = mul(b, c)
}

theorem mul_to_zero(a: Nat, b: Nat): mul(a, b) = 0 -> a = 0 | b = 0

theorem divisor_lt(a: Nat, b: Nat, c: Nat):
    a != 0 & lt(1, b) & mul(a, b) = c -> lt(a, c) by {
    if a != 0 & lt(1, b) & mul(a, b) = c {
        exists(d: Nat) { add(1, d) = b & d != 0 }
        mul(a, add(1, d)) = c
        add(a, mul(a, d)) = c
        mul(a, d) != 0
        if a = c {
            add(a, mul(a, d)) = a
            mul(a, d) = 0
        }
        a != c
        lt(a, c)
    }
}

define is_prime(a: Nat) -> bool = lt(1, a) & !is_composite(a)

define any(f: Nat -> bool) -> bool = exists(n: Nat) { f(n) }

define divides(a: Nat, b: Nat) -> bool = exists(c: Nat) { mul(a, c) = b }

define true_below(f: Nat -> bool, n: Nat) -> bool = forall(x: Nat) { lt(x, n) -> f(x) }

theorem strong_induction(f: Nat -> bool): forall(k: Nat) {
    true_below(f, k) -> f(k)
} -> forall(n: Nat) { f(n) } by {
    if (forall(k: Nat) { true_below(f, k) -> f(k) }) {
        define g(x: Nat) -> bool = true_below(f, x)
        induction(g)
        forall(x: Nat) {
            if g(x) {
                true_below(f, x)
                f(x)
                forall(y: Nat) {
                    if lt(y, Suc(x)) {
                        if lt(y, x) {
                            f(y)
                        }
                        if !lt(y, x) {
                            y = x
                            f(y)
                        }
                        f(y)
                    }
                }
                true_below(f, Suc(x))
                g(Suc(x))
            }
        }
        forall(n: Nat) {
            g(Suc(n))
            true_below(f, Suc(n))
            f(n)
        }
    }
}

theorem divides_trans(a: Nat, b: Nat, c: Nat):
    divides(a, b) & divides(b, c) -> divides(a, c) by {
    if divides(a, b) & divides(b, c) {
        exists(d: Nat) { mul(a, d) = b }
        exists(e: Nat) { mul(b, e) = c }
        mul(a, mul(d, e)) = c
        divides(a, c)
    }
}

theorem has_prime_divisor(n: Nat): lt(1, n) -> exists(p: Nat) {
    is_prime(p) & divides(p, n)
} by {
    strong_induction(has_prime_divisor)
    forall(k: Nat) {
        if true_below(has_prime_divisor, k) {
            if is_prime(k) {
                divides(k, k)
                has_prime_divisor(k)
            }
            if is_composite(k) {
                exists(b: Nat, c: Nat) {
                    lt(1, b) & lt(1, c) & k = mul(b, c)
                }
                lt(b, k)
                has_prime_divisor(b)
                exists(p: Nat) {
                    is_prime(p) & divides(p, b)
                }
                divides(p, k)
                has_prime_divisor(k)
            }
            has_prime_divisor(k)
        }
    }
}

struct NatPair {
    first: Nat
    second: Nat
}

// Takes (n, n!) -> (n+1, (n+1)!)
define fac_helper(p: NatPair) -> NatPair = NatPair.new(Suc(NatPair.first(p)), mul(Suc(NatPair.first(p)), NatPair.second(p)))

define factorial(n: Nat) -> Nat = NatPair.second(recursion(fac_helper, NatPair.new(0, 1), n))

theorem factorial_zero: factorial(0) = 1

theorem factorial_step(n: Nat): factorial(Suc(n)) = mul(Suc(n), factorial(n))

theorem divides_factorial(k: Nat, n: Nat):
    k != 0 & lte(k, n) -> divides(k, factorial(n)) by {
    if k != 0 {
        define f(x: Nat) -> bool = divides_factorial(k, x)
        induction(f)
        f(0)
        forall(x: Nat) {
            if f(x) {
                lte(k, x) -> divides(k, factorial(x))
                if lte(k, Suc(x)) {
                    if k = Suc(x) {
                        divides(k, factorial(Suc(x)))
                    }
                    if k != Suc(x) {
                        lte(k, x)
                        divides(k, factorial(x))
                        divides(factorial(x), factorial(Suc(x)))
                        divides(k, factorial(Suc(x)))
                    }
                    divides_factorial(k, Suc(x))
                }
                f(Suc(x))
            }
        }
        divides_factorial(k, n)
    }
}

theorem factorial_nondecreasing(n: Nat): lte(factorial(n), factorial(Suc(n)))

theorem lte_one_factorial(a: Nat): lte(1, factorial(a)) by {
    induction(lte_one_factorial)
    lte_one_factorial(0)
    forall(x: Nat) {
        if lte_one_factorial(x) {
            lte(1, factorial(x))
            lte(factorial(x), factorial(Suc(x)))
            lte_one_factorial(Suc(x))
        }
    }
}

theorem lt_imp_lt_suc(a: Nat, b: Nat): lt(a, b) -> lt(a, Suc(b)) by {
    if lt(a, b) {
        exists(c: Nat) { add(a, c) = b & c != 0 }
        add(a, Suc(c)) = Suc(b)
        Suc(c) != 0
        lt(a, Suc(b))
    }
}

theorem lt_compares(a: Nat, b: Nat): lt(a, b) | lt(b, a) | a = b by {
    define f(x: Nat) -> bool = lt_compares(x, b)
    induction(f)
    f(0)
    forall(x: Nat) {
        if f(x) {
            lt(x, b) | lt(b, x) | x = b
            if lt(x, b) {
                lt(Suc(x), b) | Suc(x) = b
            }
            if lt(b, x) {
                lt(b, Suc(x))
            }
            if x = b {
                lt(b, Suc(x))
            }
            f(Suc(x))
        }
    }
}

theorem divides_suc(a: Nat, b: Nat): divides(a, b) & divides(a, Suc(b)) -> a = 1 by {
    if divides(a, b) & divides(a, Suc(b)) {
        exists(c: Nat) { mul(a, c) = b }
        exists(d: Nat) { mul(a, d) = Suc(b) }
        lt(mul(a, c), mul(a, d))
        lte(c, d)
        exists(e: Nat) { add(c, e) = d }
        mul(a, add(c, e)) = Suc(b)
        add(mul(a, c), mul(a, e)) = Suc(b)
        add(b, mul(a, e)) = Suc(b)
        mul(a, e) = 1
        a = 1
    }
}

theorem exists_infinite_primes(n: Nat): exists(p: Nat) {
    lte(n, p) & is_prime(p)
} by {
    let m: Nat = Suc(factorial(n))
    lt(1, m)
    exists(p: Nat) {
        is_prime(p) & divides(p, m)
    }
    p != 1
    if lte(p, n) {
        divides_factorial(p, n)
        divides(p, factorial(n))
        divides(p, Suc(factorial(n)))
        p = 1
        // I want to express "contradiction" here. Like, "false".
    }
    !lte(p, n)
    lte(n, p)
}

